// <auto-generated />
using System;
using DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<string>("AppoinmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex(new[] { "DoctorId" }, "IX_Appointment_DoctorId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Appointment_PatientId");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_Appointment_ScheduleId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Arv", b =>
                {
                    b.Property<int>("ArvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArvId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArvId");

                    b.ToTable("ARV", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ArvProtocol", b =>
                {
                    b.Property<int>("ProtocolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProtocolId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolId");

                    b.ToTable("ARV_Protocol", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ArvProtocolDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArvId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtocolId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArvId" }, "IX_ARV_Protocol_Detail_ArvId");

                    b.HasIndex(new[] { "ProtocolId" }, "IX_ARV_Protocol_Detail_ProtocolId");

                    b.ToTable("ARV_Protocol_Detail", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.HasIndex(new[] { "AuthorId" }, "IX_Blog_AuthorId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex(new[] { "BlogId" }, "IX_Comment_BlogId");

                    b.HasIndex(new[] { "UserId" }, "IX_Comment_UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CustomizedArvProtocol", b =>
                {
                    b.Property<int>("CustomProtocolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomProtocolId"));

                    b.Property<int?>("BaseProtocolId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomProtocolId");

                    b.HasIndex(new[] { "BaseProtocolId" }, "IX_CustomizedARV_Protocol_BaseProtocolId");

                    b.HasIndex(new[] { "DoctorId" }, "IX_CustomizedARV_Protocol_DoctorId");

                    b.HasIndex(new[] { "PatientId" }, "IX_CustomizedARV_Protocol_PatientId");

                    b.ToTable("CustomizedARV_Protocol", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CustomizedArvProtocolDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArvId")
                        .HasColumnType("int");

                    b.Property<int>("CustomProtocolId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArvId" }, "IX_CustomizedARV_Protocol_Detail_ArvId");

                    b.HasIndex(new[] { "CustomProtocolId" }, "IX_CustomizedARV_Protocol_Detail_CustomProtocolId");

                    b.ToTable("CustomizedARV_Protocol_Detail", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DoctorInfo", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorInfo", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.EducationalResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceId");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_EducationalResources_CreatedBy");

                    b.ToTable("EducationalResources");
                });

            modelBuilder.Entity("DAL.Entities.Examination", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int?>("Cd4Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExamDate")
                        .HasColumnType("date");

                    b.Property<int?>("HivLoad")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId");

                    b.HasIndex(new[] { "DoctorId" }, "IX_Examination_DoctorId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Examination_PatientId");

                    b.ToTable("Examination", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProtocolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_Notification_AppointmentId");

                    b.HasIndex(new[] { "ExaminationId" }, "IX_Notification_ExaminationId");

                    b.HasIndex(new[] { "ProtocolId" }, "IX_Notification_ProtocolId");

                    b.HasIndex(new[] { "UserId" }, "IX_Notification_UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.HasIndex(new[] { "DoctorId" }, "IX_Schedule_DoctorId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "AccountId" }, "IX_User_AccountId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Appointment", b =>
                {
                    b.HasOne("DAL.Entities.User", "Doctor")
                        .WithMany("AppointmentDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "Patient")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.HasOne("DAL.Entities.Schedule", "Schedule")
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DAL.Entities.ArvProtocolDetail", b =>
                {
                    b.HasOne("DAL.Entities.Arv", "Arv")
                        .WithMany("ArvProtocolDetails")
                        .HasForeignKey("ArvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ArvProtocol", "Protocol")
                        .WithMany("ArvProtocolDetails")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arv");

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("DAL.Entities.Blog", b =>
                {
                    b.HasOne("DAL.Entities.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.HasOne("DAL.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.CustomizedArvProtocol", b =>
                {
                    b.HasOne("DAL.Entities.ArvProtocol", "BaseProtocol")
                        .WithMany("CustomizedArvProtocols")
                        .HasForeignKey("BaseProtocolId");

                    b.HasOne("DAL.Entities.User", "Doctor")
                        .WithMany("CustomizedArvProtocolDoctors")
                        .HasForeignKey("DoctorId");

                    b.HasOne("DAL.Entities.User", "Patient")
                        .WithMany("CustomizedArvProtocolPatients")
                        .HasForeignKey("PatientId");

                    b.Navigation("BaseProtocol");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DAL.Entities.CustomizedArvProtocolDetail", b =>
                {
                    b.HasOne("DAL.Entities.Arv", "Arv")
                        .WithMany("CustomizedArvProtocolDetails")
                        .HasForeignKey("ArvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.CustomizedArvProtocol", "CustomProtocol")
                        .WithMany("CustomizedArvProtocolDetails")
                        .HasForeignKey("CustomProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arv");

                    b.Navigation("CustomProtocol");
                });

            modelBuilder.Entity("DAL.Entities.DoctorInfo", b =>
                {
                    b.HasOne("DAL.Entities.User", "Doctor")
                        .WithOne("DoctorInfo")
                        .HasForeignKey("DAL.Entities.DoctorInfo", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DAL.Entities.EducationalResource", b =>
                {
                    b.HasOne("DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("EducationalResources")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("DAL.Entities.Examination", b =>
                {
                    b.HasOne("DAL.Entities.User", "Doctor")
                        .WithMany("ExaminationDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "Patient")
                        .WithMany("ExaminationPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("DAL.Entities.Examination", "Examination")
                        .WithMany("Notifications")
                        .HasForeignKey("ExaminationId");

                    b.HasOne("DAL.Entities.CustomizedArvProtocol", "Protocol")
                        .WithMany("Notifications")
                        .HasForeignKey("ProtocolId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Appointment");

                    b.Navigation("Examination");

                    b.Navigation("Protocol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.HasOne("DAL.Entities.User", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("DAL.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Appointment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.Arv", b =>
                {
                    b.Navigation("ArvProtocolDetails");

                    b.Navigation("CustomizedArvProtocolDetails");
                });

            modelBuilder.Entity("DAL.Entities.ArvProtocol", b =>
                {
                    b.Navigation("ArvProtocolDetails");

                    b.Navigation("CustomizedArvProtocols");
                });

            modelBuilder.Entity("DAL.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DAL.Entities.CustomizedArvProtocol", b =>
                {
                    b.Navigation("CustomizedArvProtocolDetails");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.Examination", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("AppointmentDoctors");

                    b.Navigation("AppointmentPatients");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("CustomizedArvProtocolDoctors");

                    b.Navigation("CustomizedArvProtocolPatients");

                    b.Navigation("DoctorInfo");

                    b.Navigation("EducationalResources");

                    b.Navigation("ExaminationDoctors");

                    b.Navigation("ExaminationPatients");

                    b.Navigation("Notifications");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
